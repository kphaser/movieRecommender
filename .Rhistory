recom <- predict(recommender_model, userSelect, n = 10)
recom_list <- as(recom, "list")
recom_result <- data.frame(recom_list)
colnames(recom_result) <- "List of Movies"
return(recom_result)
}
movie_recommendation(movie1,movie2,movie3)
runApp()
recom_result
runApp()
as.character(titles[order(titles)])
runApp()
output$table <- renderTable({
movie_recommendation <- function(movie1, movie2, movie3) {
row_num <- which(titles == movie1)
row_num2 <- which(titles == movie2)
row_num3 <- which(titles == movie3)
userSelect <- matrix(NA, length(titles))
userSelect <- moviedata[,]
mat <- as(userSelect, "matrix")
mat[1, 1:ncol(mat)] <- NA
mat[row_num] <- 5 #hard code first selection to rating 5
mat[row_num2] <- 4 #hard code second selection to rating 4
mat[row_num3] <- 4 #hard code third selection to rating 4
userSelect <- as(mat, "realRatingMatrix")
#Create Recommender Model
recommender_model <- Recommender(moviedata, method = "UBCF")
recom <- predict(recommender_model, userSelect, n = 10)
recom_list <- as(recom, "list")
recom_result <- data.frame(recom_list)
colnames(recom_result) <- "Check these out:"
return(recom_result)
}
recommends <-
movie_recommendation(input$movie1, input$movie2, input$movie3)
recommends
})
shinyServer(function(input, output) {
# Text for the 3 boxes showing average scores
formulaText1 <- reactive({
paste(input$movie1)
})
formulaText2 <- reactive({
paste(input$movie2)
})
formulaText3 <- reactive({
paste(input$movie3)
})
output$movie1 <- renderText({
formulaText1()
})
output$movie2 <- renderText({
formulaText2()
})
output$movie3 <- renderText({
formulaText3()
})
# Table containing recommendations
output$table <- renderTable({
movie_recommendation <- function(movie1, movie2, movie3) {
row_num <- which(titles == movie1)
row_num2 <- which(titles == movie2)
row_num3 <- which(titles == movie3)
userSelect <- matrix(NA, length(titles))
userSelect <- moviedata[,]
mat <- as(userSelect, "matrix")
mat[1, 1:ncol(mat)] <- NA
mat[row_num] <- 5 #hard code first selection to rating 5
mat[row_num2] <- 4 #hard code second selection to rating 4
mat[row_num3] <- 4 #hard code third selection to rating 4
userSelect <- as(mat, "realRatingMatrix")
#Create Recommender Model
recommender_model <- Recommender(moviedata, method = "UBCF")
recom <- predict(recommender_model, userSelect, n = 10)
recom_list <- as(recom, "list")
recom_result <- data.frame(recom_list)
colnames(recom_result) <- "Check these out:"
return(recom_result)
}
recommends <-
movie_recommendation(input$movie1, input$movie2, input$movie3)
recommends
})
# Generate a table summarizing each players stats
# output$table <- renderDataTable({
#     movie_recommendation(input$movie1, input$movie2, input$movie3)
# })
})
wellPanel(
selectInput("movie1", "Movie #1",
as.character(titles[order(titles)])),
selectInput("movie2", "Movie #2",
as.character(titles[order(titles)])),
selectInput("movie3", "Movie #3",
as.character(titles[order(titles)])),
submitButton("Show me some movies")
))
runApp()
movies2 <- read.csv("data/movies.csv", header = TRUE, stringsAsFactors=FALSE)
ratings <- read.csv("data/ratings.csv", header = TRUE)
movie_recommendation <- function(input,input2,input3) {
row_num <- which(movies2[,2] == input)
row_num2 <- which(movies2[,2] == input2)
row_num3 <- which(movies2[,2] == input3)
userSelect <- matrix(NA,8552)
userSelect[row_num] <- 5 #hard code first selection to rating 5
userSelect[row_num2] <- 4 #hard code second selection to rating 4
userSelect[row_num3] <- 3 #hard code third selection to rating 3
userSelect <- t(userSelect)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- ratingmat[,-1]
colnames(userSelect) <- colnames(ratingmat)
ratingmat2 <- rbind(userSelect,ratingmat)
ratingmat2 <- as.matrix(ratingmat2)
#Convert rating matrix into a sparse matrix
ratingmat2 <- as(ratingmat2, "realRatingMatrix")
#Create Recommender Model. "UBCF" stands for user-based collaborative filtering
recommender_model <- Recommender(ratingmat2, method = "UBCF",param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat2[1], n=10)
recom_list <- as(recom, "list")
recom_result <- data.frame(matrix(NA,10))
for (i in c(1:10)){
recom_result[i,1] <- movies2[as.integer(recom_list[[1]][i]),2]
}
colnames(recom_result) <- "Recommended Titles"
return(recom_result)
}
recom_result
movies2[,2]
colnames(movies2)
movies2 <- read.csv("data/movies.csv", header = TRUE, stringsAsFactors=FALSE)
rm(list=ls())
library(dplyr)
db <- src_sqlite('movielens.db')
movs = tbl(db, "movies")
rats = tbl(db, "ratings")
movs %>% left_join(rats)
rm(list=ls())
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(data.table)
library(DBI)
library(RSQLite)
getwd()
setwd("C:/Users/kphas_000/home/projects/movierec/")
con = dbConnect(SQLite(), dbname="movielens.db")
myQuery <- dbSendQuery(con, "SELECT * FROM movies LIMIT 10")
test_result <- dbFetch(myQuery)
test_result
movies <- dbSendQuery(con, "SELECT * FROM movies")
movies <- dbFetch(movies)
ratings <- dbSendQuery(con, "SELECT * FROM ratings")
ratings <- dbFetch(ratings)
head(movies)
str(movies)
head(ratings)
str(ratings)
movies <- movies[-1,]
ratings <- ratings[-1,]
movies$movieId <- as.integer(movies$movieId)
ratings$userId <- as.integer(ratings$userId)
ratings$movieId <- as.integer(ratings$movieId)
ratings$rating <- as.numeric(ratings$rating)
str(movies)
str(ratings)
genres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)
genres2 <- as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:7)
head(genres2)
colnames(genres2) <- c(1:10)
head(genres2)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") # we have 18 genres in total
genre_matrix <- matrix(0,9126,18) #empty matrix, 10330=no of movies+1, 18=no of genres
genre_matrix[1,] <- genre_list #set first row to genre list
colnames(genre_matrix) <- genre_list #set column names to genre list
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])  #convert from characters to integers
}
head(genre_matrix2)
binaryratings <- ratings
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
head(binaryratings)
ratings <- ratings[-1,]
rm(list=ls())
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(data.table)
library(DBI)
library(RSQLite)
getwd()
setwd("C:/Users/kphas_000/home/projects/movierec/")
con = dbConnect(SQLite(), dbname="movielens.db")
movies <- dbSendQuery(con, "SELECT * FROM movies")
movies <- dbFetch(movies)
ratings <- dbSendQuery(con, "SELECT * FROM ratings")
ratings <- dbFetch(ratings)
head(movies)
str(movies)
head(ratings)
str(ratings)
movies <- movies[-1,]
ratings <- ratings[-1,]
ratings$time_stamp <- NULL
movies$movieId <- as.integer(movies$movieId)
ratings$userId <- as.integer(ratings$userId)
ratings$movieId <- as.integer(ratings$movieId)
ratings$rating <- as.numeric(ratings$rating)
str(movies)
str(ratings)
genres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)
genres2 <- as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") # we have 18 genres in total
genre_matrix <- matrix(0,9126,18) #empty matrix, 10330=no of movies+1, 18=no of genres
genre_matrix[1,] <- genre_list #set first row to genre list
colnames(genre_matrix) <- genre_list #set column names to genre list
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])  #convert from characters to integers
}
head(genre_matrix2)
binaryratings <- ratings
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
binaryratings2 <- dcast(binaryratings, movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(binaryratings2)){
binaryratings2[which(is.na(binaryratings2[,i]) == TRUE),i] <- 0
}
head(binaryratings2)
colnames(binaryratings2)
head(colnames(binaryratings2))
binaryratings2 = binaryratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
head(binaryratings)
head(binaryratings2)
length(unique(movies$movieId))
length(unique(ratings$movieId))
movieIds <- length(unique(movies$movieId)) #9125
ratingmovieIds <- length(unique(ratings$movieId)) #9066
movies2 <- movies[-which((movieIds %in% ratingmovieIds) == FALSE),]
rownames(movies2) <- NULL
head(movies2)
tail(movies2)
head(genres2)
genre_matrix3 <- genre_matrix2[-which((movieIds %in% ratingmovieIds) == FALSE),]
head(genre_matrix3)
rownames(genre_matrix3) <- NULL
head(genre_matrix3)
result = matrix(0,18,706)
result
for (c in 1:ncol(binaryratings2)){
for (i in 1:ncol(genre_matrix3)){
result[i,c] <- sum((genre_matrix3[,i]) * (binaryratings2[,c]))
}
warnings()
dim(binaryratings2)
head(binaryratings2)
dim(binaryratings2)
result = matrix(0,18,671) #binaryratings2 matrix has 9066 rows and 671 cols
for (c in 1:ncol(binaryratings2)){
for (i in 1:ncol(genre_matrix3)){
result[i,c] <- sum((genre_matrix3[,i]) * (binaryratings2[,c]))
}
warnings()
dim(genre_matrix3)
rm(list=ls())
#################
library(recommenderlab)
library(reshape2)
library(ggplot2)
library(data.table)
library(DBI)
library(RSQLite)
# Connect to SQLite database
getwd()
setwd("C:/Users/kphas_000/home/projects/movierec/")
con = dbConnect(SQLite(), dbname="movielens.db")
# Test SQL query
myQuery <- dbSendQuery(con, "SELECT * FROM movies LIMIT 10")
test_result <- dbFetch(myQuery)
test_result
# Read in the movies and ratings tables from the movielens database
movies <- dbSendQuery(con, "SELECT * FROM movies")
movies <- dbFetch(movies)
ratings <- dbSendQuery(con, "SELECT * FROM ratings")
ratings <- dbFetch(ratings)
head(movies)
str(movies)
head(ratings)
str(ratings)
# # if you want to use dplyr to load and merge the datasets
# library(dplyr)
# db <- src_sqlite('movielens.db')
# movs = tbl(db, "movies")
# rats = tbl(db, "ratings")
# movs %>% left_join(rats)
# The first row are just a bunch of headers and the timestamp column does not seem to provide any information. Let's remove those
movies <- movies[-1,]
ratings <- ratings[-1,]
ratings$time_stamp <- NULL
movies$movieId <- as.integer(movies$movieId)
ratings$userId <- as.integer(ratings$userId)
ratings$movieId <- as.integer(ratings$movieId)
ratings$rating <- as.numeric(ratings$rating)
str(movies)
str(ratings)
genres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)
genres2 <- as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
colnames(genres2) <- c(1:10)
genre_list <- c("Action", "Adventure", "Animation", "Children",
"Comedy", "Crime","Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical", "Mystery","Romance",
"Sci-Fi", "Thriller", "War", "Western") # we have 18 genres in total
genre_matrix <- matrix(0,9126,18) #empty matrix, 10330=no of movies+1, 18=no of genres
genre_matrix[1,] <- genre_list #set first row to genre list
colnames(genre_matrix) <- genre_list #set column names to genre list
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])  #convert from characters to integers
}
head(genre_matrix2)
binaryratings <- ratings
for (i in 1:nrow(binaryratings)){
if (binaryratings[i,3] > 3){
binaryratings[i,3] <- 1
}
else{
binaryratings[i,3] <- -1
}
binaryratings2 <- dcast(binaryratings, movieId~userId, value.var = "rating", na.rm=FALSE)
for (i in 1:ncol(binaryratings2)){
binaryratings2[which(is.na(binaryratings2[,i]) == TRUE),i] <- 0
}
binaryratings2 = binaryratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds
dim(binaryratings2)
movieIds <- length(unique(movies$movieId)) #9125
ratingmovieIds <- length(unique(ratings$movieId)) #9066
movieIds
ratingmovieIDs
ratingmovieIds
movies[-which((movieIds %in% ratingmovieIds) == FALSE),]
dim(movies[-which((movieIds %in% ratingmovieIds) == FALSE),])
which((movieIds %in% ratingmovieIds) == FALSE)
ratingmovieIds
9125-9066
movies2 <- movies[-which((movieIds %in% ratingmovieIds) == FALSE),]
movieIds <- unique(movies$movieId) #9125
length(unique(movies$movieId))
length(unique(ratings$movieId))
ratingmovieIds <- unique(ratings$movieId) #9066
movies[-which((movieIds %in% ratingmovieIds) == FALSE),]
movies2 <- movies[-which((movieIds %in% ratingmovieIds) == FALSE),]
dim(movies2)
head(movies2)
rownames(movies2) <- NULL
genre_matrix3 <- genre_matrix2[-which((movieIds %in% ratingmovieIds) == FALSE),]
rownames(genre_matrix3) <- NULL
dim(binaryratings2)
result = matrix(0,18,671) #binaryratings2 matrix has 9066 rows and 671 cols
for (c in 1:ncol(binaryratings2)){
for (i in 1:ncol(genre_matrix3)){
result[i,c] <- sum((genre_matrix3[,i]) * (binaryratings2[,c]))
}
head(result)
for (i in 1:nrow(result)){
if (result[i] < 0){
result[i] <- 0
}
else {
result[i] <- 1
}
result2 <- result[1,] #First user's profile
sim_mat <- rbind.data.frame(result2, genre_matrix3)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
library(proxy)
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:8552]))
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:9067]))
rows <- which(sim_results == min(sim_results))
head(sim_results)
movies[rows,2]
results2
result2
movies[rows,]
library(reshape2)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
ratingmat
dim(ratingmat)
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:9066]))
rows <- which(sim_results == min(sim_results))
movies[rows,2]
movies[rows,]
library(reshape2)
ratingmat <- dcast(ratings, userId~movieId, value.var = "rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
dim(ratingmat)
ratingmat <- as(ratingmat, "realRatingMatrix")
ratingmat_norm <- normalize(ratingmat)
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
recom_list
recom_result <- matrix(0,10)
for (i in c(1:10)){
recom_result[i] <- movies[as.integer(recom_list[[1]][i]),2]
}
recom_result
evaluation_scheme <- evaluationScheme(ratingmat, method="cross-validation", k=5, given=3, goodRating=5) #k=5 meaning a 5-fold cross validation. given=3 meaning a Given-3 protocol
evaluation_results <- evaluate(evaluation_scheme, method="UBCF", n=c(1,3,5,10,15,20))
eval_results <- getConfusionMatrix(evaluation_results)[[1]]
eval_results
plot(eval_results)
plot(evaluation_results)
evaluation_results
attributes(evaluation_results)
models_to_evaluate <- list(
IBCF_cos = list(name = "IBCF",
param = list(method = "cosine")),
UBCF_cos = list(name = "UBCF",
param = list(method = "cosine")),
POPULAR_cor = list(name = "POPULAR", param = NULL),
RANDOM = list(name = "RANDOM", param=NULL)
)
n_recommendations <- c(1, 3, 5, 10, 15, 20)
list_results <- evaluate(x = evaluation_scheme,
method = models_to_evaluate,
n = n_recommendations)
head(rating_mat)
head(ratingmat)
ratingmat_norm
recom_result
eval_results
getwd()
write.csv("movies2.csv",row.names=FALSE)
?write.csv
write.csv(movies2,"movies2.csv",row.names=FALSE)
movies$title
length(movies2$title)
runApp()
head(order(movies2$title[1:length(movies2$title)]))
dim(as.character(titles[order(titles)])))
dim(as.character(titles[order(titles)]))
dim(as.character(movies2$titles[order(titles)]))
dim(as.character(movies2$titles[order(movies2$titles)]))
movies2$titles
movies2$title
dim(as.character(movies2$title[order(movies2$title)]))
order(movies$title)
movies2$title[order(movies2$title)]
runApp()
movies2$title[order(movies2$title)]
head(movies2$title[order(movies2$title)])
class(movies2$title[order(movies2$title)])
runApp()
movies2$title
runApp()
movies2$title[order(movies2$title)]
runApp()
genre_lst
genre_list
head(movies2)
movies2[title=="Primer (2004)"]
movies2[title=="Toy Story (1995"]
movies2[title=="Toy Story (1995)"]
movies2[movies2$title=="Toy Story (1995)"]
movies2[movies2$title=="Toy Story (1995)",]
movies2[movies2$title=="Primer (2004)",]
movies2[movies2$title=="Children of Men (2006)",]
runApp()
